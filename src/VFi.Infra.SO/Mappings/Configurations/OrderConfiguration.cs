// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using VFi.Domain.SO.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System;
using System.Collections.Generic;

namespace VFi.Infra.SO.Mappings.Configurations
{
    public partial class OrderConfiguration : IEntityTypeConfiguration<Order>
    {
        public void Configure(EntityTypeBuilder<Order> entity)
        {
            entity.ToTable("Order", "so");

            entity.Property(e => e.Id).ValueGeneratedNever();

            entity.Property(e => e.AccountName).HasMaxLength(255);

            entity.Property(e => e.AirFreight).HasColumnType("money");

            entity.Property(e => e.AmountDiscount).HasColumnType("money");

            entity.Property(e => e.ApproveByName).HasMaxLength(150);

            entity.Property(e => e.ApproveComment).HasMaxLength(1000);

            entity.Property(e => e.ApproveDate).HasColumnType("datetime");

            entity.Property(e => e.BillAddress).HasMaxLength(250);

            entity.Property(e => e.BillCountry).HasMaxLength(250);

            entity.Property(e => e.BillDistrict).HasMaxLength(250);

            entity.Property(e => e.BillName).HasMaxLength(250);

            entity.Property(e => e.BillProvince).HasMaxLength(250);

            entity.Property(e => e.BillWard).HasMaxLength(250);

            entity.Property(e => e.Calculation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('*')");

            entity.Property(e => e.ChannelName).HasMaxLength(255);

            entity.Property(e => e.Code)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.CommodityGroup)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.ContractName).HasMaxLength(255);

            entity.Property(e => e.CreatedByName).HasMaxLength(255);

            entity.Property(e => e.CreatedDate).HasColumnType("datetime");

            entity.Property(e => e.Currency)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.CurrencyName).HasMaxLength(255);

            entity.Property(e => e.CustomerCode)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.CustomerName).HasMaxLength(255);

            entity.Property(e => e.DeliveryAddress).HasMaxLength(250);

            entity.Property(e => e.DeliveryCountry).HasMaxLength(250);

            entity.Property(e => e.DeliveryDistrict).HasMaxLength(250);

            entity.Property(e => e.DeliveryMethodCode)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.DeliveryMethodName).HasMaxLength(255);

            entity.Property(e => e.DeliveryName).HasMaxLength(250);

            entity.Property(e => e.DeliveryNote).HasMaxLength(500);

            entity.Property(e => e.DeliveryPhone).HasMaxLength(250);

            entity.Property(e => e.DeliveryProvince).HasMaxLength(250);

            entity.Property(e => e.DeliveryWard).HasMaxLength(250);

            entity.Property(e => e.DeliveryZipCode).HasMaxLength(250);

            entity.Property(e => e.Description).HasMaxLength(1000);

            entity.Property(e => e.DomesticCarrier).HasMaxLength(250);

            entity.Property(e => e.DomesticPackage).HasDefaultValueSql("((1))");

            entity.Property(e => e.DomesticShiping).HasColumnType("money");

            entity.Property(e => e.DomesticTracking)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.EstimatedDeliveryDate).HasColumnType("datetime");

            entity.Property(e => e.ExchangeRate).HasColumnType("decimal(18, 10)");

            entity.Property(e => e.File).HasColumnType("ntext");

            entity.Property(e => e.GroupEmployeeName).HasMaxLength(255);

            entity.Property(e => e.Image).HasMaxLength(1000);

            entity.Property(e => e.Note).HasMaxLength(500);

            entity.Property(e => e.OrderDate).HasColumnType("datetime");

            entity.Property(e => e.OrderType)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Paid).HasColumnType("money");

            entity.Property(e => e.PaymentExpiryDate).HasColumnType("datetime");

            entity.Property(e => e.PaymentMethodId).HasComment("Điều khoản thanh toán");

            entity.Property(e => e.PaymentMethodName).HasMaxLength(255);

            entity.Property(e => e.PaymentTermName).HasMaxLength(255);

            entity.Property(e => e.PriceListName).HasMaxLength(255);

            entity.Property(e => e.PurchaseGroup)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.QuotationName).HasMaxLength(255);

            entity.Property(e => e.RouterShipping).HasMaxLength(250);

            entity.Property(e => e.SeaFreight).HasColumnType("money");

            entity.Property(e => e.ShippingMethodCode)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.ShippingMethodName).HasMaxLength(255);

            entity.Property(e => e.StoreCode)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.ShipmentRouting).HasMaxLength(150);

            entity.Property(e => e.StoreName).HasMaxLength(255);

            entity.Property(e => e.Surcharge).HasColumnType("money");

            entity.Property(e => e.Total).HasColumnType("money");

            entity.Property(e => e.TotalAmountTax).HasColumnType("money");

            entity.Property(e => e.UpdatedByName).HasMaxLength(255);

            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.Channel)
                .WithMany(p => p.Order)
                .HasForeignKey(d => d.ChannelId)
                .HasConstraintName("FK_Order_SalesChannel");

            entity.HasOne(d => d.Contract)
                .WithMany(p => p.Order)
                .HasForeignKey(d => d.ContractId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_Order_Contract");

            entity.HasOne(d => d.Customer)
                .WithMany(p => p.Order)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("FK_Order_Customer");

            entity.HasOne(d => d.PaymentMethod)
                .WithMany(p => p.Order)
                .HasForeignKey(d => d.PaymentMethodId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_Order_PaymentMethod");

            entity.HasOne(d => d.PaymentTerm)
                .WithMany(p => p.Order)
                .HasForeignKey(d => d.PaymentTermId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_Order_PaymentTerm");

            entity.HasOne(d => d.Quotation)
                .WithMany(p => p.Order)
                .HasForeignKey(d => d.QuotationId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_Order_Quotation");

            entity.HasOne(d => d.ShippingMethod)
                .WithMany(p => p.Order)
                .HasForeignKey(d => d.ShippingMethodId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_Order_ShippingMethod");

            OnConfigurePartial(entity);
        }

        partial void OnConfigurePartial(EntityTypeBuilder<Order> entity);
    }
}
