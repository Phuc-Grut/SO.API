// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using VFi.Domain.SO.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System;
using System.Collections.Generic;

namespace VFi.Infra.SO.Mappings.Configurations
{
    public partial class ContractConfiguration : IEntityTypeConfiguration<Contract>
    {
        public void Configure(EntityTypeBuilder<Contract> entity)
        {
            entity.ToTable("Contract", "so");

            entity.Property(e => e.Id).ValueGeneratedNever();

            entity.Property(e => e.AccountName).HasMaxLength(255);

            entity.Property(e => e.Address).HasMaxLength(1000);

            entity.Property(e => e.AmountDiscount).HasColumnType("money");

            entity.Property(e => e.AmountLiquidation).HasColumnType("money");

            entity.Property(e => e.ApproveByName).HasMaxLength(150);

            entity.Property(e => e.ApproveComment).HasMaxLength(1000);

            entity.Property(e => e.ApproveDate).HasColumnType("datetime");

            entity.Property(e => e.Buyer).HasMaxLength(255);

            entity.Property(e => e.Calculation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('*')");

            entity.Property(e => e.Code)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.ContractTermId).HasComment("Điều khoản thanh toán");

            entity.Property(e => e.ContractTermName).HasMaxLength(255);

            entity.Property(e => e.ContractTypeName).HasMaxLength(255);

            entity.Property(e => e.Country).HasMaxLength(250);

            entity.Property(e => e.CreatedByName).HasMaxLength(255);

            entity.Property(e => e.CreatedDate).HasColumnType("datetime");

            entity.Property(e => e.Currency)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.CurrencyName).HasMaxLength(255);

            entity.Property(e => e.CustomerCode)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.CustomerName).HasMaxLength(250);

            entity.Property(e => e.DeliveryDate).HasColumnType("datetime");

            entity.Property(e => e.Description).HasMaxLength(500);

            entity.Property(e => e.District).HasMaxLength(250);

            entity.Property(e => e.EndDate).HasColumnType("datetime");

            entity.Property(e => e.ExchangeRate).HasColumnType("decimal(18, 10)");

            entity.Property(e => e.File).HasColumnType("ntext");

            entity.Property(e => e.GroupEmployeeName).HasMaxLength(255);

            entity.Property(e => e.LiquidationDate).HasColumnType("datetime");

            entity.Property(e => e.LiquidationReason).HasMaxLength(500);

            entity.Property(e => e.Name).HasMaxLength(255);

            entity.Property(e => e.Note).HasMaxLength(500);

            entity.Property(e => e.OrderCode).HasMaxLength(255);

            entity.Property(e => e.Paid).HasColumnType("money");

            entity.Property(e => e.PaymentDueDate).HasColumnType("datetime");

            entity.Property(e => e.Province).HasMaxLength(250);

            entity.Property(e => e.QuotationName).HasMaxLength(255);

            entity.Property(e => e.Received).HasColumnType("money");

            entity.Property(e => e.Saler).HasMaxLength(255);

            entity.Property(e => e.SignDate).HasColumnType("datetime");

            entity.Property(e => e.StartDate).HasColumnType("datetime");

            entity.Property(e => e.TotalAmountTax).HasColumnType("money");

            entity.Property(e => e.UpdatedByName).HasMaxLength(255);

            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

            entity.Property(e => e.Ward).HasMaxLength(250);

            entity.HasOne(d => d.ContractTerm)
                .WithMany(p => p.Contract)
                .HasForeignKey(d => d.ContractTermId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_Contract_ContractTerm");

            entity.HasOne(d => d.ContractType)
                .WithMany(p => p.Contract)
                .HasForeignKey(d => d.ContractTypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_Contract_ContractType");

            entity.HasOne(d => d.GroupEmployee)
                .WithMany(p => p.Contract)
                .HasForeignKey(d => d.GroupEmployeeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_Contract_GroupEmployee");

            entity.HasOne(d => d.Quotation)
                .WithMany(p => p.Contract)
                .HasForeignKey(d => d.QuotationId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_Contract_Quotation");

            OnConfigurePartial(entity);
        }

        partial void OnConfigurePartial(EntityTypeBuilder<Contract> entity);
    }
}
